[global_tags]

[agent]
  ## Default data collection interval for all inputs
  interval = "5s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output 
plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this 
value
  ## allows for longer periods of output downtime without dropping metrics 
at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random 
amount.
  ## Each plugin will sleep for a random time within jitter before 
collecting.
  ## This can be used to avoid many plugins querying things like sysfs at 
the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "5s"

  ## Default flushing interval for all outputs. Maximum flush_interval 
will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to 
avoid
  ## large write spikes for users running a large number of telegraf 
instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 
10-15s
  flush_jitter = "5s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 
1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each 
individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

  debug = true

  quiet = false

###############################################################################
#                            OUTPUT PLUGINS                                   
#
###############################################################################

[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  token = "${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}"
  organization = "${DOCKER_INFLUXDB_INIT_ORG}"
  bucket = "${DOCKER_INFLUXDB_INIT_BUCKET}"

###############################################################################
#                            INPUT PLUGINS                                    
#
###############################################################################

[[inputs.mqtt_consumer]]
  servers = ["tcp://emqx:1883"]
  topics = [
    "tele/#",
    "cmd/#",
    "stat/#"
  ]
  data_format = "json_v2" # invokes the parser -- lines following are parser config
  [[inputs.mqtt_consumer.topic_parsing]]
    topic = "tele/+/+"  # all topics with 3 segments
    measurement = "measurement/_/_"
    tags = "_/location/sensor_id"
  [[inputs.mqtt_consumer.json_v2]]
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "fields.#.snd" # GJSON path: JSON is flat -- all keys at root
      type = "float"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "fields.#.co2"
      type = "float"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "fields.#.pm25"
      type = "float"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "fields.#.hum"
      type = "float"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "fields.#.temp"
      type = "float"

  # data_format = "value"
  # data_type = "float"
  # [[inputs.mqtt_consumer.topic_parsing]]
  #   topic = "datos/+/"
  #   measurement = "measurement/_/"
  #   tags = "_/tag/"
